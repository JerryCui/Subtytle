package com.peike.theatersubtitle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SUBTITLE".
 */
public class SubtitleDao extends AbstractDao<Subtitle, Long> {

    public static final String TABLENAME = "SUBTITLE";

    /**
     * Properties of entity Subtitle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImdbId = new Property(1, String.class, "imdbId", false, "IMDB_ID");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property Language = new Property(3, String.class, "language", false, "LANGUAGE");
        public final static Property Duration = new Property(4, String.class, "duration", false, "DURATION");
        public final static Property Iso639 = new Property(5, String.class, "iso639", false, "ISO639");
        public final static Property AddDate = new Property(6, String.class, "addDate", false, "ADD_DATE");
        public final static Property FileSize = new Property(7, Integer.class, "fileSize", false, "FILE_SIZE");
        public final static Property DownloadCount = new Property(8, Integer.class, "downloadCount", false, "DOWNLOAD_COUNT");
        public final static Property FileId = new Property(9, Integer.class, "fileId", false, "FILE_ID");
        public final static Property Downloaded = new Property(10, Boolean.class, "downloaded", false, "DOWNLOADED");
    }

    ;


    public SubtitleDao(DaoConfig config) {
        super(config);
    }

    public SubtitleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBTITLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMDB_ID\" TEXT," + // 1: imdbId
                "\"FILE_NAME\" TEXT," + // 2: fileName
                "\"LANGUAGE\" TEXT," + // 3: language
                "\"DURATION\" TEXT," + // 4: duration
                "\"ISO639\" TEXT," + // 5: iso639
                "\"ADD_DATE\" TEXT," + // 6: addDate
                "\"FILE_SIZE\" INTEGER," + // 7: fileSize
                "\"DOWNLOAD_COUNT\" INTEGER," + // 8: downloadCount
                "\"FILE_ID\" INTEGER," + // 9: fileId
                "\"DOWNLOADED\" INTEGER);"); // 10: downloaded
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBTITLE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Subtitle entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String imdbId = entity.getImdbId();
        if (imdbId != null) {
            stmt.bindString(2, imdbId);
        }

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(3, fileName);
        }

        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(4, language);
        }

        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(5, duration);
        }

        String iso639 = entity.getIso639();
        if (iso639 != null) {
            stmt.bindString(6, iso639);
        }

        String addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindString(7, addDate);
        }

        Integer fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(8, fileSize);
        }

        Integer downloadCount = entity.getDownloadCount();
        if (downloadCount != null) {
            stmt.bindLong(9, downloadCount);
        }

        Integer fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindLong(10, fileId);
        }

        Boolean downloaded = entity.getDownloaded();
        if (downloaded != null) {
            stmt.bindLong(11, downloaded ? 1L : 0L);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Subtitle readEntity(Cursor cursor, int offset) {
        Subtitle entity = new Subtitle( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imdbId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // language
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // duration
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iso639
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addDate
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // fileSize
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // downloadCount
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // fileId
                cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // downloaded
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Subtitle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImdbId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLanguage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIso639(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFileSize(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDownloadCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFileId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDownloaded(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Subtitle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Subtitle entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    public void deleteAll() {
        if (isTableExist()) {
            super.deleteAll();
        }
    }

    public boolean isTableExist() {
        Cursor cursor = db.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '" + TABLENAME + "'", null);
        if (cursor != null) {
            if (cursor.getCount() > 0) {
                cursor.close();
                return true;
            }
            cursor.close();
        }
        return false;
    }
}
